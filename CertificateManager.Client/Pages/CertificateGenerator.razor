@page "/certificateGenerator/ID={ID:int}"
@using CertificateManager.Client.src.Models
@inject IJSRuntime JSRuntime

@inherits Page<CreateForCertificateMV>

<PageTitle>Create Certificate</PageTitle>

<FluentStack Spacing="10" Orientation="Orientation.Vertical">
    <FluentStack xs="12">
        <h2>Manual Creation</h2>
    </FluentStack>

    <FluentStack HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Stretch">
        <FluentTextArea Rows="1" @bind-Value=Solution>Solution</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=CertificateAddress>Address</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=Company>Company</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=CommonName>Common Name</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=Password>Password</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=OID>OID</FluentTextArea>
    </FluentStack>

  @*   <FluentStack HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Stretch">
        <FluentTextArea Rows="1" @bind-Value=DNS1>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS2>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS3>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS4>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS5>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS6>DNS</FluentTextArea>
    </FluentStack>

    *@

    <FluentStack xs="12">
        <FluentButton IconStart="@(new Icons.Regular.Size16.GlobeArrowUp())" OnClick="() => AddDNSText()">AddDNS</FluentButton>
    </FluentStack>

    <div style="margin-top: 1rem;">
        <div class="wrap-container">
            @for(int i = 0; i < DNSStrings.Count; i++)
            {
                var index = i;

                <FluentStack ItemSpacing="5" Orientation="Orientation.Horizontal" class="flex-item">
                    <FluentTextArea style="width: 300px;"
                                    Placeholder="@($"DNS {index + 1}")"
                                    @bind-Value="DNSStrings[index]" />

                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => Remove(index))" />
                </FluentStack>
            }
        </div>
    </div>

        <FluentStack xs="12">
        <FluentButton IconStart="@(new Icons.Regular.Size16.GlobeArrowUp())" OnClick="() => MakeCrt()">Make</FluentButton>
    </FluentStack>


    <FluentGrid>
        @if(Created)
        {
            <FluentStack xs="12"><FluentLabel>@IDString</FluentLabel></FluentStack>

            <FluentStack xs="12">
                <FluentButton Color="Color.Accent" OnClick="(() => ViewModel?.DownloadPFX(ViewModel.CreatedCRTId, Solution))">Download PFX</FluentButton>
                <FluentButton Color="Color.Accent" OnClick="(() => ViewModel?.DownloadCRT(ViewModel.CreatedCRTId, Solution))">Download CRT</FluentButton>
            </FluentStack>

            <FluentStack>
                <FluentLabel>Output</FluentLabel>

                <pre class="pre-formatted-text">

                @((MarkupString)MakeOutput)
            </pre>

            </FluentStack>
        }

    </FluentGrid>



</FluentStack>

@code {

    [Parameter]
    public int ID { get; set; } = -1;

    string Solution { get; set; } = "APP_X";
    string CertificateAddress { get; set; } = "localhost";
    string Company { get; set; } = "NXT";
    string CommonName { get; set; } = "server";
    string Password { get; set; } = "secret";

    string MakeOutput { get; set; } = "";

    public string IDString { get; set; } = "";
    public bool Created = false;
    public string OID { get; set; } = "1.3.6.1.5.5.7.3.1";
    // public string DNS1 { get; set; } = "";
    // public string DNS2 { get; set; } = "";
    // public string DNS3 { get; set; } = "";
    // public string DNS4 { get; set; } = ""; 
    // public string DNS5 { get; set; } = "";
    // public string DNS6 { get; set; } = "";

    public List<string> DNSStrings;
    public void SetDns(int index, string text)
    {
        DNSStrings[index] = text;
    }
    private void Remove(int index)
    {
        if(index >= 0 && index < DNSStrings.Count)
        {
            DNSStrings.RemoveAt(index);
        }
    }
    public void AddDNSText()
    {
        DNSStrings.Add($"{DNSStrings.Count}");
        StateHasChanged();
    }


    protected async override Task OnInitializedAsync()
    {
        // await JSRuntime.InvokeVoidAsync("mostraAlert", "Ciao da Blazor C#!");
        DNSStrings  = new List<string>() { "" };

        if(ID != -1)
        {
            DNSStrings.Clear();
            var cert = await ViewModel.GetCertificateID(ID);

            Solution = cert.Solution;
            Password = cert.Password;
            CertificateAddress = cert.Address;
            CommonName = cert.CN;
            Company = cert.Company;

            if(!string.IsNullOrEmpty(cert.Oid))
                OID = cert.Oid;

            foreach(var dns in cert.DNS)
            {
                if(string.IsNullOrEmpty(dns))
                    continue;

                DNSStrings.Add(dns);
            }

        }

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    public async void MakeCrt()
    {
        var result = await ViewModel.Make(Company, CertificateAddress, OID, Solution, CommonName, Password, DNSStrings.ToArray());

        foreach(var res in result ?? new ())
        {
            MakeOutput += $"<br>Created: {res.Created}, ThumbPrint: {res.ThumbPrint}, Serial: {res.SerialNumber}<br>";
        }

        if(result is null)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "Certificate is not created");
            ViewModel.OnStateChange("Update the output");
            return;
        }


        Created = true;
        IDString = $"Created the {ViewModel.CreatedCRTId} crt";
        ViewModel.OnStateChange("Update the output");

    }

}
