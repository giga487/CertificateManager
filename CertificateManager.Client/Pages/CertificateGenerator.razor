@page "/certificateGenerator"
@using CertificateManager.Client.src.Models
@inject IJSRuntime JSRuntime

@inherits Page<CreateForCertificateMV>

<PageTitle>Create Certificate</PageTitle>



<FluentStack Spacing="10" Orientation="Orientation.Vertical">
    <FluentStack xs="12">
        <h2>Manual Creation</h2>
    </FluentStack>

    <FluentStack HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Stretch">
        <FluentTextArea Rows="1" @bind-Value=Solution>Solution</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=CertificateAddress>Address</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=Company>Company</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=CommonName>Common Name</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=Password>Password</FluentTextArea>
    </FluentStack>

    <FluentStack HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Stretch">
        <FluentTextArea Rows="1" @bind-Value=DNS1>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS2>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS3>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS4>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS5>DNS</FluentTextArea>
        <FluentTextArea Rows="1" @bind-Value=DNS6>DNS</FluentTextArea>
    </FluentStack>

    <FluentStack xs="12">
        <FluentButton IconStart="@(new Icons.Regular.Size16.GlobeArrowUp())" OnClick="() => MakeCrt()">Make</FluentButton>
    </FluentStack>


    <FluentGrid>
        @if(Created)
        {
            <FluentStack xs="12"><FluentLabel>@IDString</FluentLabel></FluentStack>

            <FluentStack xs="12">
                <FluentButton Color="Color.Accent" OnClick="(() => ViewModel?.DownloadPFX(ViewModel.CreatedCRTId, Solution))">Download PFX</FluentButton>
                <FluentButton Color="Color.Accent" OnClick="(() => ViewModel?.DownloadCRT(ViewModel.CreatedCRTId, Solution))">Download CRT</FluentButton>
            </FluentStack>

            <FluentStack>
                <FluentLabel>Output</FluentLabel>

                <pre class="pre-formatted-text">

                @((MarkupString)MakeOutput)
            </pre>

            </FluentStack>
        }

    </FluentGrid>



</FluentStack>

@code {
    string Solution { get; set; } = "APP_X";
    string CertificateAddress { get; set; } = "localhost";
    string Company { get; set; } = "NXT";
    string CommonName { get; set; } = "server";
    string Password { get; set; } = "secret";

    string MakeOutput { get; set; } = "";

    public string IDString { get; set; } = "";
    public bool Created = false;

    public string DNS1 { get; set; } = "";
    public string DNS2 { get; set; } = "";
    public string DNS3 { get; set; } = "";
    public string DNS4 { get; set; } = ""; 
    public string DNS5 { get; set; } = "";
    public string DNS6 { get; set; } = "";


    protected async override Task OnInitializedAsync()
    {
        // await JSRuntime.InvokeVoidAsync("mostraAlert", "Ciao da Blazor C#!");
        base.OnInitializedAsync();
    }

    public async void MakeCrt()
    {
        List<string> dns = new();
        if(!string.IsNullOrEmpty(DNS1))
        {
            dns.Add(DNS1);
        }

        if(!string.IsNullOrEmpty(DNS2))
        {
            dns.Add(DNS2);
        }

        if(!string.IsNullOrEmpty(DNS3))
        {
            dns.Add(DNS3);
        }

        if(!string.IsNullOrEmpty(DNS4))
        {
            dns.Add(DNS4);
        }

        if(!string.IsNullOrEmpty(DNS5))
        {
            dns.Add(DNS5);
        }

        if(!string.IsNullOrEmpty(DNS6))
        {
            dns.Add(DNS6);
        }

        var result = await ViewModel.Make(Company, CertificateAddress, Solution, CommonName, Password, dns.ToArray());

        foreach(var res in result)
        {
            MakeOutput += $"<br>Created: {res.Created}, ThumbPrint: {res.ThumbPrint}, Serial: {res.SerialNumber}<br>";
        }

        Created = true;
        IDString = $"Created the {ViewModel.CreatedCRTId} crt";
        ViewModel.OnStateChange("Update the output");

    }

}
